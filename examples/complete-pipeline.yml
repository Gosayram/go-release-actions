# Complete CI/CD Pipeline Example
# Place this file in .github/workflows/pipeline.yml in your Go project

name: Complete CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.21"
  APP_NAME: "my-application"

jobs:
  lint:
    name: Code Quality
    uses: Gosayram/go-release-actions/.github/workflows/lint.yml@main
    with:
      go-version: ${{ env.GO_VERSION }}
      golangci-lint-version: "v1.55.2"
      enable-fmt-check: true
      enable-vet-check: true
      enable-mod-check: true
      enable-staticcheck: true
      fail-on-warnings: false

  security:
    name: Security Analysis
    uses: Gosayram/go-release-actions/.github/workflows/security-scan.yml@main
    with:
      go-version: ${{ env.GO_VERSION }}
      enable-gosec: true
      enable-nancy: true
      enable-trivy: true
      enable-codeql: true
      gosec-severity: "medium"
      trivy-severity: "HIGH,CRITICAL"
      fail-on-vulnerability: false

  test:
    name: Build and Test
    needs: [lint]
    uses: Gosayram/go-release-actions/.github/workflows/build-and-test.yml@main
    with:
      go-version: ${{ env.GO_VERSION }}
      test-timeout: "10m"
      enable-coverage: true
      coverage-threshold: 80

  release:
    name: Create Release
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test, security]
    uses: Gosayram/go-release-actions/.github/workflows/release.yml@main
    with:
      go-version: ${{ env.GO_VERSION }}
      app-name: ${{ env.APP_NAME }}
      build-platforms: '["linux/amd64", "linux/arm64", "darwin/amd64", "darwin/arm64", "windows/amd64"]'
      enable-checksums: true
      create-release: true
      prerelease: false
      draft: false
    secrets:
      release-token: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
      actions: read 